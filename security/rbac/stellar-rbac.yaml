# RBAC configuration for obsrvr-stellar-components
# Service Accounts
apiVersion: v1
kind: ServiceAccount
metadata:
  name: stellar-arrow-source
  namespace: obsrvr-stellar
  labels:
    app: stellar-arrow-source
  annotations:
    eks.amazonaws.com/role-arn: arn:aws:iam::ACCOUNT_ID:role/stellar-source-role
automountServiceAccountToken: true
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: ttp-arrow-processor
  namespace: obsrvr-stellar
  labels:
    app: ttp-arrow-processor
  annotations:
    eks.amazonaws.com/role-arn: arn:aws:iam::ACCOUNT_ID:role/ttp-processor-role
automountServiceAccountToken: true
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: arrow-analytics-sink
  namespace: obsrvr-stellar
  labels:
    app: arrow-analytics-sink
  annotations:
    eks.amazonaws.com/role-arn: arn:aws:iam::ACCOUNT_ID:role/analytics-sink-role
automountServiceAccountToken: true
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: stellar-admin
  namespace: obsrvr-stellar
  labels:
    role: admin
automountServiceAccountToken: true
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: stellar-operator
  namespace: obsrvr-stellar
  labels:
    role: operator
automountServiceAccountToken: true
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: stellar-viewer
  namespace: obsrvr-stellar
  labels:
    role: viewer
automountServiceAccountToken: true
---
# Cluster Roles
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: stellar-source-role
rules:
# Basic pod operations
- apiGroups: [""]
  resources: ["pods", "pods/log", "pods/status"]
  verbs: ["get", "list", "watch"]
# Service discovery
- apiGroups: [""]
  resources: ["services", "endpoints"]
  verbs: ["get", "list", "watch"]
# ConfigMaps and Secrets (read-only)
- apiGroups: [""]
  resources: ["configmaps", "secrets"]
  verbs: ["get", "list", "watch"]
# Events (for logging)
- apiGroups: [""]
  resources: ["events"]
  verbs: ["create", "patch"]
# Metrics
- apiGroups: ["metrics.k8s.io"]
  resources: ["pods", "nodes"]
  verbs: ["get", "list"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: stellar-processor-role
rules:
# Enhanced permissions for processing workloads
- apiGroups: [""]
  resources: ["pods", "pods/log", "pods/status"]
  verbs: ["get", "list", "watch"]
- apiGroups: [""]
  resources: ["services", "endpoints"]
  verbs: ["get", "list", "watch"]
- apiGroups: [""]
  resources: ["configmaps", "secrets"]
  verbs: ["get", "list", "watch"]
- apiGroups: [""]
  resources: ["events"]
  verbs: ["create", "patch"]
# Horizontal Pod Autoscaler access
- apiGroups: ["autoscaling"]
  resources: ["horizontalpodautoscalers"]
  verbs: ["get", "list", "watch"]
# Metrics access
- apiGroups: ["metrics.k8s.io"]
  resources: ["pods", "nodes"]
  verbs: ["get", "list"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: stellar-analytics-role
rules:
# Standard pod operations
- apiGroups: [""]
  resources: ["pods", "pods/log", "pods/status"]
  verbs: ["get", "list", "watch"]
- apiGroups: [""]
  resources: ["services", "endpoints"]
  verbs: ["get", "list", "watch"]
- apiGroups: [""]
  resources: ["configmaps", "secrets"]
  verbs: ["get", "list", "watch"]
- apiGroups: [""]
  resources: ["events"]
  verbs: ["create", "patch"]
# Persistent Volume access for data storage
- apiGroups: [""]
  resources: ["persistentvolumes", "persistentvolumeclaims"]
  verbs: ["get", "list", "watch"]
# Metrics access
- apiGroups: ["metrics.k8s.io"]
  resources: ["pods", "nodes"]
  verbs: ["get", "list"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: stellar-admin-role
rules:
# Full access to stellar namespace resources
- apiGroups: ["*"]
  resources: ["*"]
  verbs: ["*"]
  resourceNames: []
# Limited cluster-wide access
- apiGroups: [""]
  resources: ["nodes", "namespaces"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["metrics.k8s.io"]
  resources: ["*"]
  verbs: ["get", "list"]
- apiGroups: ["storage.k8s.io"]
  resources: ["storageclasses"]
  verbs: ["get", "list", "watch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: stellar-operator-role
rules:
# Deployment and service management
- apiGroups: ["apps"]
  resources: ["deployments", "replicasets", "daemonsets", "statefulsets"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
- apiGroups: [""]
  resources: ["services", "endpoints", "configmaps"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
- apiGroups: [""]
  resources: ["pods", "pods/log", "pods/status"]
  verbs: ["get", "list", "watch", "delete"]
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["get", "list", "watch"]
- apiGroups: [""]
  resources: ["events"]
  verbs: ["get", "list", "watch", "create", "patch"]
# HPA management
- apiGroups: ["autoscaling"]
  resources: ["horizontalpodautoscalers"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
# Ingress management
- apiGroups: ["networking.k8s.io"]
  resources: ["ingresses", "networkpolicies"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
# PVC management
- apiGroups: [""]
  resources: ["persistentvolumeclaims"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: stellar-viewer-role
rules:
# Read-only access to most resources
- apiGroups: [""]
  resources: ["pods", "pods/log", "pods/status", "services", "endpoints", "configmaps"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["apps"]
  resources: ["deployments", "replicasets", "daemonsets", "statefulsets"]
  verbs: ["get", "list", "watch"]
- apiGroups: [""]
  resources: ["events"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["autoscaling"]
  resources: ["horizontalpodautoscalers"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["networking.k8s.io"]
  resources: ["ingresses", "networkpolicies"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["metrics.k8s.io"]
  resources: ["pods", "nodes"]
  verbs: ["get", "list"]
# Explicitly deny access to secrets
- apiGroups: [""]
  resources: ["secrets"]
  verbs: []
---
# Role Bindings
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: stellar-source-binding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: stellar-source-role
subjects:
- kind: ServiceAccount
  name: stellar-arrow-source
  namespace: obsrvr-stellar
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: stellar-processor-binding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: stellar-processor-role
subjects:
- kind: ServiceAccount
  name: ttp-arrow-processor
  namespace: obsrvr-stellar
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: stellar-analytics-binding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: stellar-analytics-role
subjects:
- kind: ServiceAccount
  name: arrow-analytics-sink
  namespace: obsrvr-stellar
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: stellar-admin-binding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: stellar-admin-role
subjects:
- kind: ServiceAccount
  name: stellar-admin
  namespace: obsrvr-stellar
# Add specific users with admin access
- kind: User
  name: admin@obsrvr.com
  apiGroup: rbac.authorization.k8s.io
- kind: User
  name: sre-lead@obsrvr.com
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: stellar-operator-binding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: stellar-operator-role
subjects:
- kind: ServiceAccount
  name: stellar-operator
  namespace: obsrvr-stellar
# Add SRE team members
- kind: User
  name: sre-team@obsrvr.com
  apiGroup: rbac.authorization.k8s.io
- kind: Group
  name: sre-operators
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: stellar-viewer-binding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: stellar-viewer-role
subjects:
- kind: ServiceAccount
  name: stellar-viewer
  namespace: obsrvr-stellar
# Add development team and stakeholders
- kind: User
  name: dev-team@obsrvr.com
  apiGroup: rbac.authorization.k8s.io
- kind: User
  name: product-team@obsrvr.com
  apiGroup: rbac.authorization.k8s.io
- kind: Group
  name: stellar-viewers
  apiGroup: rbac.authorization.k8s.io
---
# Namespace-specific roles
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: obsrvr-stellar
  name: secret-manager
rules:
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
- apiGroups: ["external-secrets.io"]
  resources: ["externalsecrets", "secretstores"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: secret-manager-binding
  namespace: obsrvr-stellar
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: secret-manager
subjects:
- kind: ServiceAccount
  name: external-secrets-service-account
  namespace: obsrvr-stellar
- kind: User
  name: admin@obsrvr.com
  apiGroup: rbac.authorization.k8s.io
---
# Pod Security Policy (if PSP is enabled)
apiVersion: policy/v1beta1
kind: PodSecurityPolicy
metadata:
  name: stellar-restricted
  annotations:
    seccomp.security.alpha.kubernetes.io/allowedProfileNames: 'runtime/default'
    apparmor.security.beta.kubernetes.io/allowedProfileNames: 'runtime/default'
    seccomp.security.alpha.kubernetes.io/defaultProfileName: 'runtime/default'
    apparmor.security.beta.kubernetes.io/defaultProfileName: 'runtime/default'
spec:
  privileged: false
  allowPrivilegeEscalation: false
  requiredDropCapabilities:
    - ALL
  volumes:
    - 'configMap'
    - 'emptyDir'
    - 'projected'
    - 'secret'
    - 'downwardAPI'
    - 'persistentVolumeClaim'
  hostNetwork: false
  hostIPC: false
  hostPID: false
  runAsUser:
    rule: 'MustRunAsNonRoot'
  supplementalGroups:
    rule: 'MustRunAs'
    ranges:
      - min: 1000
        max: 65535
  fsGroup:
    rule: 'MustRunAs'
    ranges:
      - min: 1000
        max: 65535
  readOnlyRootFilesystem: true
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: stellar-psp-role
rules:
- apiGroups: ['policy']
  resources: ['podsecuritypolicies']
  verbs: ['use']
  resourceNames:
  - stellar-restricted
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: stellar-psp-binding
roleRef:
  kind: ClusterRole
  name: stellar-psp-role
  apiGroup: rbac.authorization.k8s.io
subjects:
- kind: ServiceAccount
  name: stellar-arrow-source
  namespace: obsrvr-stellar
- kind: ServiceAccount
  name: ttp-arrow-processor
  namespace: obsrvr-stellar
- kind: ServiceAccount
  name: arrow-analytics-sink
  namespace: obsrvr-stellar