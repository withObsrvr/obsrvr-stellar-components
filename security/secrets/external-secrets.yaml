# External Secrets Operator configuration for obsrvr-stellar-components
apiVersion: external-secrets.io/v1beta1
kind: SecretStore
metadata:
  name: aws-secrets-manager
  namespace: obsrvr-stellar
spec:
  provider:
    aws:
      service: SecretsManager
      region: us-east-1
      auth:
        jwt:
          serviceAccountRef:
            name: external-secrets-service-account
---
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: stellar-source-secrets
  namespace: obsrvr-stellar
spec:
  refreshInterval: 300s
  secretStoreRef:
    name: aws-secrets-manager
    kind: SecretStore
  target:
    name: stellar-source-secrets
    creationPolicy: Owner
    template:
      type: Opaque
      engineVersion: v2
      data:
        api_key: "{{ .api_key }}"
        jwt_secret: "{{ .jwt_secret }}"
        tls_cert: "{{ .tls_cert }}"
        tls_key: "{{ .tls_key }}"
        ca_cert: "{{ .ca_cert }}"
        stellar_rpc_token: "{{ .stellar_rpc_token }}"
  dataFrom:
    - extract:
        key: obsrvr/stellar/source
---
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: ttp-processor-secrets
  namespace: obsrvr-stellar
spec:
  refreshInterval: 300s
  secretStoreRef:
    name: aws-secrets-manager
    kind: SecretStore
  target:
    name: ttp-processor-secrets
    creationPolicy: Owner
    template:
      type: Opaque
      engineVersion: v2
      data:
        api_key: "{{ .api_key }}"
        jwt_secret: "{{ .jwt_secret }}"
        tls_cert: "{{ .tls_cert }}"
        tls_key: "{{ .tls_key }}"
        ca_cert: "{{ .ca_cert }}"
        compute_encryption_key: "{{ .compute_encryption_key }}"
  dataFrom:
    - extract:
        key: obsrvr/stellar/processor
---
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: analytics-sink-secrets
  namespace: obsrvr-stellar
spec:
  refreshInterval: 300s
  secretStoreRef:
    name: aws-secrets-manager
    kind: SecretStore
  target:
    name: analytics-sink-secrets
    creationPolicy: Owner
    template:
      type: Opaque
      engineVersion: v2
      data:
        api_key: "{{ .api_key }}"
        jwt_secret: "{{ .jwt_secret }}"
        tls_cert: "{{ .tls_cert }}"
        tls_key: "{{ .tls_key }}"
        ca_cert: "{{ .ca_cert }}"
        websocket_cert: "{{ .websocket_cert }}"
        websocket_key: "{{ .websocket_key }}"
        s3_access_key: "{{ .s3_access_key }}"
        s3_secret_key: "{{ .s3_secret_key }}"
  dataFrom:
    - extract:
        key: obsrvr/stellar/analytics
---
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: database-secrets
  namespace: obsrvr-stellar
spec:
  refreshInterval: 300s
  secretStoreRef:
    name: aws-secrets-manager
    kind: SecretStore
  target:
    name: database-secrets
    creationPolicy: Owner
    template:
      type: Opaque
      engineVersion: v2
      data:
        username: "{{ .username }}"
        password: "{{ .password }}"
        host: "{{ .host }}"
        port: "{{ .port }}"
        database: "{{ .database }}"
        connection_string: "postgresql://{{ .username }}:{{ .password }}@{{ .host }}:{{ .port }}/{{ .database }}?sslmode=require"
  dataFrom:
    - extract:
        key: obsrvr/stellar/database
---
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: monitoring-secrets
  namespace: obsrvr-stellar
spec:
  refreshInterval: 600s
  secretStoreRef:
    name: aws-secrets-manager
    kind: SecretStore
  target:
    name: monitoring-secrets
    creationPolicy: Owner
    template:
      type: Opaque
      engineVersion: v2
      data:
        prometheus_remote_write_password: "{{ .prometheus_remote_write_password }}"
        grafana_admin_password: "{{ .grafana_admin_password }}"
        pagerduty_service_key: "{{ .pagerduty_service_key }}"
        pagerduty_service_key_high: "{{ .pagerduty_service_key_high }}"
        slack_webhook_url: "{{ .slack_webhook_url }}"
        smtp_password: "{{ .smtp_password }}"
  dataFrom:
    - extract:
        key: obsrvr/stellar/monitoring
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: external-secrets-service-account
  namespace: obsrvr-stellar
  annotations:
    eks.amazonaws.com/role-arn: arn:aws:iam::ACCOUNT_ID:role/external-secrets-role
automountServiceAccountToken: true
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: external-secrets-stellar
rules:
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["get", "list", "create", "update", "patch", "delete"]
- apiGroups: ["external-secrets.io"]
  resources: ["externalsecrets", "secretstores", "clustersecretstores"]
  verbs: ["get", "list", "watch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: external-secrets-stellar
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: external-secrets-stellar
subjects:
- kind: ServiceAccount
  name: external-secrets-service-account
  namespace: obsrvr-stellar