apiVersion: component.flowctl.io/v1
kind: ComponentBundle
metadata:
  name: obsrvr-stellar-suite
  version: v1.0.0
  namespace: obsrvr
  description: "Complete Stellar data processing pipeline with Apache Arrow"
  author: "Obsrvr"
  homepage: "https://github.com/withobsrvr/obsrvr-stellar-components"
  repository: "https://github.com/withobsrvr/obsrvr-stellar-components"
  license: "Apache-2.0"
  tags: 
    - stellar
    - blockchain
    - arrow
    - ttp
    - analytics
    - real-time
    - data-processing

spec:
  # Execution modes supported by this bundle
  execution:
    modes: [native, container, hybrid]
    default: native
    
  # Communication protocol configuration
  communication:
    protocol: arrow-flight
    preserveInNative: true
    ports:
      stellar-arrow-source: 8815
      ttp-arrow-processor: 8816
      arrow-analytics-sink: 8817
    discovery: localhost # Use localhost for native mode
    tls:
      enabled: false # Default to disabled for development
      mutual: false
      
  # Components included in this bundle
  components:
    - name: stellar-arrow-source
      path: components/stellar-arrow-source/
      type: source
      language: go
      version: v1.0.0
      outputEventTypes: 
        - stellar.ledger
      outputSchemas:
        - stellar_ledger
      communication:
        protocol: arrow-flight
        port: 8815
        streams: 
          - name: stellar_ledgers
            schema: stellar_ledger
            description: "Stellar ledger data stream"
        endpoints:
          - path: /health
            method: GET
            description: "Health check endpoint"
          - path: /metrics
            method: GET  
            description: "Prometheus metrics endpoint"
            
    - name: ttp-arrow-processor
      path: components/ttp-arrow-processor/
      type: processor
      language: go
      version: v1.0.0
      inputEventTypes:
        - stellar.ledger
      outputEventTypes:
        - ttp.event
      inputSchemas:
        - stellar_ledger
      outputSchemas:
        - ttp_event
      communication:
        protocol: arrow-flight
        port: 8816
        streams:
          - name: ttp_events
            schema: ttp_event
            description: "Token Transfer Protocol events"
        consumes:
          - stellar_ledgers
        endpoints:
          - path: /health
            method: GET
            description: "Health check endpoint"
          - path: /metrics
            method: GET
            description: "Prometheus metrics endpoint"
            
    - name: arrow-analytics-sink
      path: components/arrow-analytics-sink/
      type: sink
      language: go
      version: v1.0.0
      inputEventTypes:
        - ttp.event
      inputSchemas:
        - ttp_event
      communication:
        protocol: arrow-flight
        port: 8817
        consumes:
          - ttp_events
        endpoints:
          - path: /health
            method: GET
            description: "Health check endpoint"
          - path: /metrics
            method: GET
            description: "Prometheus metrics endpoint"
          - path: /ws
            method: WebSocket
            description: "Real-time event stream"

  # Pre-configured pipeline templates
  templates:
    - name: rpc-pipeline
      description: "Process TTP events from Stellar RPC endpoints"
      components:
        - stellar-arrow-source:
            config:
              source_type: rpc
              rpc_endpoint: ${STELLAR_RPC_URL:-https://soroban-testnet.stellar.org}
              network_passphrase: ${NETWORK_PASSPHRASE:-Test SDF Network ; September 2015}
              start_ledger: ${START_LEDGER:-0}
              batch_size: ${BATCH_SIZE:-1000}
        - ttp-arrow-processor:
            config:
              source_endpoint: localhost:8815
              processor_threads: ${PROCESSOR_THREADS:-4}
              event_types: ${EVENT_TYPES:-payment,path_payment_strict_receive,path_payment_strict_send}
        - arrow-analytics-sink:
            config:
              processor_endpoint: localhost:8816
              output_formats: ${OUTPUT_FORMATS:-parquet,json}
              parquet_path: ${DATA_DIR:-./data}/ttp_events
              json_output: ${JSON_OUTPUT:-true}
              
    - name: datalake-pipeline
      description: "Process TTP events from data lake storage"
      components:
        - stellar-arrow-source:
            config:
              source_type: datalake
              storage_backend: ${STORAGE_BACKEND:-s3}
              bucket_name: ${BUCKET_NAME}
              aws_region: ${AWS_REGION:-us-west-2}
              start_ledger: ${START_LEDGER:-0}
              end_ledger: ${END_LEDGER:-0}
              batch_size: ${BATCH_SIZE:-1000}
        - ttp-arrow-processor:
            config:
              source_endpoint: localhost:8815
              processor_threads: ${PROCESSOR_THREADS:-4}
              event_types: ${EVENT_TYPES:-payment,path_payment_strict_receive,path_payment_strict_send}
        - arrow-analytics-sink:
            config:
              processor_endpoint: localhost:8816
              output_formats: ${OUTPUT_FORMATS:-parquet}
              parquet_path: ${DATA_DIR:-./data}/ttp_events
              partition_by: ${PARTITION_BY:-date}
              compression: ${COMPRESSION:-snappy}
              
    - name: analytics-pipeline
      description: "Real-time TTP analytics with multiple outputs"
      components:
        - stellar-arrow-source:
            config:
              source_type: rpc
              rpc_endpoint: ${STELLAR_RPC_URL:-https://horizon.stellar.org}
              network_passphrase: ${NETWORK_PASSPHRASE:-Public Global Stellar Network ; September 2015}
              start_ledger: ${START_LEDGER:-0}
              batch_size: ${BATCH_SIZE:-1000}
        - ttp-arrow-processor:
            config:
              source_endpoint: localhost:8815
              processor_threads: ${PROCESSOR_THREADS:-8}
              event_types: ${EVENT_TYPES:-payment,path_payment_strict_receive,path_payment_strict_send}
              enable_metrics: true
        - arrow-analytics-sink:
            config:
              processor_endpoint: localhost:8816
              output_formats: ${OUTPUT_FORMATS:-parquet,websocket,json}
              parquet_path: ${DATA_DIR:-./data}/ttp_events
              websocket_port: ${WEBSOCKET_PORT:-8080}
              real_time_analytics: ${REAL_TIME:-true}
              buffer_size: ${BUFFER_SIZE:-10000}

  # Bundle-level shared configuration
  shared:
    environment:
      # Logging
      LOG_LEVEL: ${LOG_LEVEL:-info}
      LOG_FORMAT: ${LOG_FORMAT:-json}
      
      # Performance
      ARROW_BATCH_SIZE: ${ARROW_BATCH_SIZE:-1000}
      FLIGHT_BUFFER_SIZE: ${FLIGHT_BUFFER_SIZE:-10000}
      
      # Monitoring
      METRICS_PORT: ${METRICS_PORT:-9090}
      HEALTH_CHECK_INTERVAL: ${HEALTH_CHECK_INTERVAL:-30s}
      
      # Arrow-specific
      ARROW_MEMORY_POOL: ${ARROW_MEMORY_POOL:-default}
      ARROW_COMPUTE_THREADS: ${ARROW_COMPUTE_THREADS:-0} # 0 = auto-detect
      
    volumes:
      - name: data
        path: ${DATA_DIR:-./data}
        description: "Data storage volume"
      - name: logs  
        path: ${LOG_DIR:-./logs}
        description: "Log storage volume"

  # Bundle-level configuration schema
  config:
    stellar:
      network:
        type: string
        default: "testnet"
        description: "Stellar network (mainnet/testnet)"
        enum: [mainnet, testnet]
        env: NETWORK_PASSPHRASE
        
      rpc_endpoint:
        type: string
        description: "Stellar RPC endpoint URL"
        env: STELLAR_RPC_URL
        examples:
          - "https://horizon.stellar.org" # mainnet
          - "https://soroban-testnet.stellar.org" # testnet
        
    storage:
      data_dir:
        type: string
        default: "./data"
        description: "Base directory for data storage"
        env: DATA_DIR
        
      backend:
        type: string
        description: "Storage backend for datalake mode"
        enum: [s3, gcs, filesystem]
        env: STORAGE_BACKEND
        
      bucket_name:
        type: string
        description: "Storage bucket name"
        env: BUCKET_NAME
        
    performance:
      batch_size:
        type: integer
        default: 1000
        minimum: 100
        maximum: 10000
        description: "Arrow batch size for processing"
        env: BATCH_SIZE
        
      buffer_size:
        type: integer
        default: 10000
        minimum: 1000
        maximum: 100000
        description: "Channel buffer size"
        env: BUFFER_SIZE
        
      processor_threads:
        type: integer
        default: 4
        minimum: 1
        maximum: 32
        description: "Number of processor threads"
        env: PROCESSOR_THREADS
        
    output:
      formats:
        type: array
        items:
          type: string
          enum: [parquet, json, websocket, csv]
        default: [parquet, json]
        description: "Output formats to generate"
        env: OUTPUT_FORMATS
        
      compression:
        type: string
        default: "snappy"
        enum: [none, snappy, gzip, lz4, zstd]
        description: "Compression algorithm for outputs"
        env: COMPRESSION
        
    monitoring:
      enable_metrics:
        type: boolean
        default: true
        description: "Enable Prometheus metrics"
        env: ENABLE_METRICS
        
      metrics_port:
        type: integer
        default: 9090
        description: "Prometheus metrics port"
        env: METRICS_PORT

  # Resource requirements for deployment
  resources:
    stellar-arrow-source:
      requests:
        cpu: "200m"
        memory: "256Mi"
      limits:
        cpu: "1000m"
        memory: "1Gi"
        
    ttp-arrow-processor:
      requests:
        cpu: "500m"
        memory: "512Mi"
      limits:
        cpu: "2000m"
        memory: "2Gi"
        
    arrow-analytics-sink:
      requests:
        cpu: "300m"
        memory: "256Mi"
      limits:
        cpu: "1000m"
        memory: "1Gi"

  # Platform support
  platforms:
    - linux/amd64
    - linux/arm64
    - darwin/amd64
    - darwin/arm64

  # Dependencies and requirements
  requirements:
    go_version: "1.23+"
    arrow_version: "17.0.0+"
    flowctl_version: "0.1.0+"
    
  # Build configuration
  build:
    context: "."
    dockerfile: "Dockerfile"
    args:
      GO_VERSION: "1.23"
      ARROW_VERSION: "17.0.0"
    targets:
      - native
      - container